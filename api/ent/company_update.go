// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"portfolio-api/ent/company"
	"portfolio-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTitle sets the "title" field.
func (cu *CompanyUpdate) SetTitle(s string) *CompanyUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableTitle(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// SetDetail sets the "detail" field.
func (cu *CompanyUpdate) SetDetail(s string) *CompanyUpdate {
	cu.mutation.SetDetail(s)
	return cu
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableDetail(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetDetail(*s)
	}
	return cu
}

// SetLink sets the "link" field.
func (cu *CompanyUpdate) SetLink(s string) *CompanyUpdate {
	cu.mutation.SetLink(s)
	return cu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableLink(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetLink(*s)
	}
	return cu
}

// SetLinkType sets the "link_type" field.
func (cu *CompanyUpdate) SetLinkType(ct company.LinkType) *CompanyUpdate {
	cu.mutation.SetLinkType(ct)
	return cu
}

// SetNillableLinkType sets the "link_type" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableLinkType(ct *company.LinkType) *CompanyUpdate {
	if ct != nil {
		cu.SetLinkType(*ct)
	}
	return cu
}

// SetImageURL sets the "image_url" field.
func (cu *CompanyUpdate) SetImageURL(s string) *CompanyUpdate {
	cu.mutation.SetImageURL(s)
	return cu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableImageURL(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetImageURL(*s)
	}
	return cu
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompanyUpdate) check() error {
	if v, ok := cu.mutation.Title(); ok {
		if err := company.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Company.title": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Detail(); ok {
		if err := company.DetailValidator(v); err != nil {
			return &ValidationError{Name: "detail", err: fmt.Errorf(`ent: validator failed for field "Company.detail": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Link(); ok {
		if err := company.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "Company.link": %w`, err)}
		}
	}
	if v, ok := cu.mutation.LinkType(); ok {
		if err := company.LinkTypeValidator(v); err != nil {
			return &ValidationError{Name: "link_type", err: fmt.Errorf(`ent: validator failed for field "Company.link_type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.ImageURL(); ok {
		if err := company.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "Company.image_url": %w`, err)}
		}
	}
	return nil
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(company.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.Detail(); ok {
		_spec.SetField(company.FieldDetail, field.TypeString, value)
	}
	if value, ok := cu.mutation.Link(); ok {
		_spec.SetField(company.FieldLink, field.TypeString, value)
	}
	if value, ok := cu.mutation.LinkType(); ok {
		_spec.SetField(company.FieldLinkType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.ImageURL(); ok {
		_spec.SetField(company.FieldImageURL, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyMutation
}

// SetTitle sets the "title" field.
func (cuo *CompanyUpdateOne) SetTitle(s string) *CompanyUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableTitle(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// SetDetail sets the "detail" field.
func (cuo *CompanyUpdateOne) SetDetail(s string) *CompanyUpdateOne {
	cuo.mutation.SetDetail(s)
	return cuo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableDetail(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetDetail(*s)
	}
	return cuo
}

// SetLink sets the "link" field.
func (cuo *CompanyUpdateOne) SetLink(s string) *CompanyUpdateOne {
	cuo.mutation.SetLink(s)
	return cuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableLink(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetLink(*s)
	}
	return cuo
}

// SetLinkType sets the "link_type" field.
func (cuo *CompanyUpdateOne) SetLinkType(ct company.LinkType) *CompanyUpdateOne {
	cuo.mutation.SetLinkType(ct)
	return cuo
}

// SetNillableLinkType sets the "link_type" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableLinkType(ct *company.LinkType) *CompanyUpdateOne {
	if ct != nil {
		cuo.SetLinkType(*ct)
	}
	return cuo
}

// SetImageURL sets the "image_url" field.
func (cuo *CompanyUpdateOne) SetImageURL(s string) *CompanyUpdateOne {
	cuo.mutation.SetImageURL(s)
	return cuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableImageURL(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetImageURL(*s)
	}
	return cuo
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cuo *CompanyUpdateOne) Where(ps ...predicate.Company) *CompanyUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Company entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompanyUpdateOne) check() error {
	if v, ok := cuo.mutation.Title(); ok {
		if err := company.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Company.title": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Detail(); ok {
		if err := company.DetailValidator(v); err != nil {
			return &ValidationError{Name: "detail", err: fmt.Errorf(`ent: validator failed for field "Company.detail": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Link(); ok {
		if err := company.LinkValidator(v); err != nil {
			return &ValidationError{Name: "link", err: fmt.Errorf(`ent: validator failed for field "Company.link": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.LinkType(); ok {
		if err := company.LinkTypeValidator(v); err != nil {
			return &ValidationError{Name: "link_type", err: fmt.Errorf(`ent: validator failed for field "Company.link_type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.ImageURL(); ok {
		if err := company.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "Company.image_url": %w`, err)}
		}
	}
	return nil
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Company.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(company.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Detail(); ok {
		_spec.SetField(company.FieldDetail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Link(); ok {
		_spec.SetField(company.FieldLink, field.TypeString, value)
	}
	if value, ok := cuo.mutation.LinkType(); ok {
		_spec.SetField(company.FieldLinkType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.ImageURL(); ok {
		_spec.SetField(company.FieldImageURL, field.TypeString, value)
	}
	_node = &Company{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
