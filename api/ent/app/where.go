// Code generated by ent, DO NOT EDIT.

package app

import (
	"portfolio-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.App {
	return predicate.App(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.App {
	return predicate.App(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.App {
	return predicate.App(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.App {
	return predicate.App(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.App {
	return predicate.App(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.App {
	return predicate.App(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.App {
	return predicate.App(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldTitle, v))
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldDetail, v))
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldLink, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldImageURL, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldTitle, v))
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldDetail, v))
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldDetail, v))
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldDetail, vs...))
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldDetail, vs...))
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldDetail, v))
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldDetail, v))
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldDetail, v))
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldDetail, v))
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldDetail, v))
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldDetail, v))
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldDetail, v))
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldDetail, v))
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldDetail, v))
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldLink, v))
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldLink, v))
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldLink, vs...))
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldLink, vs...))
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldLink, v))
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldLink, v))
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldLink, v))
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldLink, v))
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldLink, v))
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldLink, v))
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldLink, v))
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldLink, v))
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldLink, v))
}

// LinkTypeEQ applies the EQ predicate on the "link_type" field.
func LinkTypeEQ(v LinkType) predicate.App {
	return predicate.App(sql.FieldEQ(FieldLinkType, v))
}

// LinkTypeNEQ applies the NEQ predicate on the "link_type" field.
func LinkTypeNEQ(v LinkType) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldLinkType, v))
}

// LinkTypeIn applies the In predicate on the "link_type" field.
func LinkTypeIn(vs ...LinkType) predicate.App {
	return predicate.App(sql.FieldIn(FieldLinkType, vs...))
}

// LinkTypeNotIn applies the NotIn predicate on the "link_type" field.
func LinkTypeNotIn(vs ...LinkType) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldLinkType, vs...))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.App {
	return predicate.App(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.App {
	return predicate.App(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.App {
	return predicate.App(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.App {
	return predicate.App(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.App {
	return predicate.App(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.App {
	return predicate.App(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.App {
	return predicate.App(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.App {
	return predicate.App(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.App {
	return predicate.App(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.App {
	return predicate.App(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.App {
	return predicate.App(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.App {
	return predicate.App(sql.FieldContainsFold(FieldImageURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.App) predicate.App {
	return predicate.App(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.App) predicate.App {
	return predicate.App(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.App) predicate.App {
	return predicate.App(sql.NotPredicates(p))
}
