// Code generated by ent, DO NOT EDIT.

package app

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the app type in the database.
	Label = "app"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDetail holds the string denoting the detail field in the database.
	FieldDetail = "detail"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldLinkType holds the string denoting the link_type field in the database.
	FieldLinkType = "link_type"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// Table holds the table name of the app in the database.
	Table = "apps"
)

// Columns holds all SQL columns for app fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDetail,
	FieldLink,
	FieldLinkType,
	FieldImageURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DetailValidator is a validator for the "detail" field. It is called by the builders before save.
	DetailValidator func(string) error
	// LinkValidator is a validator for the "link" field. It is called by the builders before save.
	LinkValidator func(string) error
	// ImageURLValidator is a validator for the "image_url" field. It is called by the builders before save.
	ImageURLValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// LinkType defines the type for the "link_type" enum field.
type LinkType string

// LinkType values.
const (
	LinkTypeApp     LinkType = "APP"
	LinkTypeCompany LinkType = "COMPANY"
)

func (lt LinkType) String() string {
	return string(lt)
}

// LinkTypeValidator is a validator for the "link_type" field enum values. It is called by the builders before save.
func LinkTypeValidator(lt LinkType) error {
	switch lt {
	case LinkTypeApp, LinkTypeCompany:
		return nil
	default:
		return fmt.Errorf("app: invalid enum value for link_type field: %q", lt)
	}
}

// OrderOption defines the ordering options for the App queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDetail orders the results by the detail field.
func ByDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetail, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByLinkType orders the results by the link_type field.
func ByLinkType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinkType, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// MarshalGQL implements graphql.Marshaler interface.
func (e LinkType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *LinkType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = LinkType(str)
	if err := LinkTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid LinkType", str)
	}
	return nil
}
