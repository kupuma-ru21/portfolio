services:
  client:
    build:
      context: ./client
      args:
        - CLIENT_PORT=${CLIENT_PORT}
        - VITE_GRAPHQL_SCHEMA_URL=${VITE_DOCKER_GRAPHQL_SCHEMA_URL}
        - VITE_GOOGLE_ANALYTICS_MEASUREMENT_ID=${VITE_GOOGLE_ANALYTICS_MEASUREMENT_ID}
        - VITE_GOOGLE_TAG_MANAGER_CONTAINER_ID=${VITE_GOOGLE_TAG_MANAGER_CONTAINER_ID}
        - VITE_EMAIL=${VITE_EMAIL}
        - VITE_RESEND_API_KEY=${VITE_RESEND_API_KEY}
    ports:
      - ${CLIENT_PORT}:${CLIENT_PORT}
    depends_on:
      - api
    restart: always

  api:
    build:
      context: ./api
      # REF: https://stackoverflow.com/questions/29261811/use-docker-compose-env-variable-in-dockerbuild-file
      args:
        - ENV=${ENV}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_HOST=db
        - POSTGRES_PORT=${POSTGRES_PORT}
        - PORT=${PORT}
        - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - ${PORT}:${PORT}
    depends_on:
      - db
    restart: always
  # REF: https://www.docker.com/blog/how-to-use-the-postgres-docker-official-image/
  db:
    image: postgres:15
    env_file: ".env"
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      # REF: https://docs.docker.com/compose/how-tos/environment-variables/set-environment-variables/
      # > You can also take advantage of interpolation. In the following example, the result is similar to the one above but Compose gives you a warning if the DEBUG variable is not set in the shell environment or in an .env file in the project directory.
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
